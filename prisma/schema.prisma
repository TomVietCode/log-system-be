generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  employeeCode   String           @map("employee_code") @db.VarChar(5)
  fullName       String           @map("full_name") @db.VarChar(255)
  dob            DateTime?        @db.Date
  accountNumber  String?          @map("account_number") @db.VarChar(50)
  email          String           @db.VarChar(255)
  password       String           @db.VarChar(255)
  phone          String?          @db.VarChar(20)
  citizenID      String?          @map("citizen_id") @db.VarChar(50)
  personalEmail  String           @map("personal_email") @db.VarChar(255)
  licensePlate   String?          @map("license_plate") @db.VarChar(20)
  role           Role             @default(DEV) @map("role")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  DevLog         DevLog[]
  ProjectMembers ProjectMembers[]

  @@map("users")
  Notification Notification[]
}

model WhiteListEmail {
  id        String   @id @default(uuid())
  email     String   @db.VarChar(255)
  domain    String?  @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("white_list_emails")
}


model Project {
  id             String           @id @default(uuid())
  name           String           @db.VarChar(255)
  description    String           @db.VarChar(255)
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  DevLog         DevLog[]
  ProjectMembers ProjectMembers[]
  tasks          Task[]

  @@map("projects")
}

model ProjectMembers {
  id        String   @id @default(uuid())
  projectId String   @map("project_id")
  userId    String   @map("user_id")
  logDate   DateTime? @map("log_date")
  joinedAt  DateTime @default(now()) @map("joined_at")
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
  @@index([userId], map: "project_members_user_id_fkey")
  @@map("project_members")
}

model Task {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  projectId String   @map("project_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  devLogs   DevLog[]
  project   Project  @relation(fields: [projectId], references: [id])

  @@index([projectId], map: "tasks_project_id_fkey")
  @@map("tasks")
}

model DevLog {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  projectId  String   @map("project_id")
  taskId     String   @map("task_id")
  totalHour  Float      @default(0) @map("total_hour")
  content    String   @db.VarChar(255)
  logDate    DateTime @default(now()) @map("log_date")
  isOvertime Boolean  @default(false) @map("is_overtime")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  project    Project  @relation(fields: [projectId], references: [id])
  task       Task     @relation(fields: [taskId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([projectId], map: "dev_logs_project_id_fkey")
  @@index([taskId], map: "dev_logs_task_id_fkey")
  @@index([userId], map: "dev_logs_user_id_fkey")
  @@map("dev_logs")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  title     String   @db.VarChar(255)
  content   String   @db.VarChar(255)
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "notifications_user_id_fkey")
  @@map("notifications")
}

enum Role {
  ADMIN
  LEADER
  HCNS
  DEV
}
